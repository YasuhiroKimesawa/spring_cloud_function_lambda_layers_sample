apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'groovy'

group 'spring-cloud-function-lambda-layers-sample'
version '1.0-SNAPSHOT'

sourceCompatibility = 1.8
targetCompatibility = 1.8

buildscript {
    ext {
        springBootVersion = '2.1.1.RELEASE'
        wrapperVersion = '1.0.13.BUILD-SNAPSHOT'
        shadowVersion = '2.0.1'
    }
    repositories {
        mavenLocal()
        jcenter()
        mavenCentral()
        maven { url "https://repo.spring.io/snapshot" }
        maven { url "https://repo.spring.io/milestone" }
    }
    dependencies {
        classpath "com.github.jengelman.gradle.plugins:shadow:${shadowVersion}"
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

apply plugin: 'maven'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'org.springframework.boot'

assemble.dependsOn = [shadowJar]

repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://repo.spring.io/snapshot" }
    maven { url "https://repo.spring.io/milestone" }
}

ext {
    springCloudFunctionVersion = "2.0.0.RC2"
    springBootVersion = "2.1.1.RELEASE"
    awsLambdaEventsVersion = "1.2.1"
    awsLambdaCoreVersion = "1.1.0"
}
ext['reactor.version'] = "3.1.7.RELEASE"

import com.github.jengelman.gradle.plugins.shadow.transformers.*

shadowJar {
    classifier = 'aws'
    dependencies {
        exclude(dependency("org.springframework.cloud:spring-cloud-function-web:${springCloudFunctionVersion}"))
    }
    // Required for Spring
    mergeServiceFiles()
    append 'META-INF/spring.handlers'
    append 'META-INF/spring.schemas'
    append 'META-INF/spring.tooling'
    transform(PropertiesFileTransformer) {
        paths = ['META-INF/spring.factories' ]
        mergeStrategy = "append"
    }
}

dependencies {
    compile("org.springframework.cloud:spring-cloud-function-adapter-aws:${springCloudFunctionVersion}")
    compile("org.springframework.cloud:spring-cloud-function-web:${springCloudFunctionVersion}")
    compile("org.springframework.boot:spring-boot-starter-validation:${springBootVersion}")
    compile("org.springframework.boot:spring-boot-starter-web:${springBootVersion}")
    compile group: 'org.modelmapper', name: 'modelmapper', version: '2.3.2'
    compile("org.springframework:spring-context:5.1.3.RELEASE")
    compileOnly("com.amazonaws:aws-lambda-java-events:${awsLambdaEventsVersion}")
    compileOnly("com.amazonaws:aws-lambda-java-core:${awsLambdaCoreVersion}")
    compileOnly("com.amazonaws:aws-lambda-java-log4j:1.0.0")
    compile("org.springframework:spring-webflux:5.1.3.RELEASE")
    compile("org.springframework:spring-webmvc:5.1.3.RELEASE")
    testCompile("org.springframework.boot:spring-boot-starter-test:${springBootVersion}")
}

jar {
    from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
}

task zipApp(type: Zip, dependsOn: build) {
    archiveName = "libraries-1.0-SNAPSHOT.zip"

    into('java/lib') {
        from "build/libs"
    }
}

artifacts {
    archives zipApp
}